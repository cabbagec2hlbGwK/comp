version: "3.8"

services:
  postgres:
    image: postgres:17-alpine
    container_name: comp-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: comp
    volumes:
      # Use a named volume for persistent data
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d comp"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Service to run initial setup like migrations
  # Run once after starting postgres: docker compose run --rm setup
  setup:
    platform: linux/amd64 # Specify platform
    image: oven/bun:latest
    working_dir: /app
    volumes:
      - .:/app
    command: sh -c "bun install --frozen-lockfile && bun run db:generate && bun run db:push && bun run db:seed"
    environment:
      # Essential for DB commands
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/comp
      # Add any other env vars required by prisma/seed scripts if necessary
    depends_on:
      postgres:
        condition: service_healthy

  # Combined app and portal service run via turbo dev
  # Main application service, built from Dockerfile
  app:
    platform: linux/amd64 # Specify platform for consistency
    container_name: comp-app
    build:
      context: . # Build context is the root ('comp/')
      dockerfile: Dockerfile # Use the Dockerfile we created
      args:
        # Explicitly set DATABASE_URL for build
        DATABASE_URL: "postgresql://build:placeholder@db:5432/build_db"
        # Source others from env_file (leave value empty)
        AUTH_SECRET:
        RESEND_API_KEY:
        REVALIDATION_SECRET:
        NEXT_PUBLIC_PORTAL_URL:
        # Add other required build ARGs here if needed (e.g., ANOTHER_VAR:)
    ports:
      - "3000:3000" # Expose app port
    # Load environment variables from the .env file
    env_file:
      - ./apps/app/.env # Assumes this file exists
    # Override DATABASE_URL to point to the postgres service
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/comp
      # Add any other runtime env vars needed that aren't in .env
      PORT: 3000 # Next.js standalone often uses PORT env var
    depends_on:
      postgres:
        condition: service_healthy # Wait for postgres
    restart: unless-stopped

  # Optional: Portal service (still running from source for dev)
  # If you want to build this too, create a similar Dockerfile and update this service
  portal:
    platform: linux/amd64 # Specify platform
    image: oven/bun:latest
    container_name: comp-portal
    working_dir: /app
    # Command installs deps and then runs portal dev
    command: sh -c "cd apps/portal && bun install --frozen-lockfile && bun run dev"
    ports:
      - "3002:3002" # Expose portal port
    env_file:
      - ./apps/portal/.env # Assumes this file exists
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/comp
    volumes:
      # Mount the entire monorepo root for portal development
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy # Wait for postgres
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
